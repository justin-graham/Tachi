{
  "version": 3,
  "sources": ["../bundle-u133CF/checked-fetch.js", "../bundle-u133CF/strip-cf-connecting-ip-header.js", "../../../src/index.ts", "../../../../node_modules/.pnpm/wrangler@3.114.15_@cloudflare+workers-types@4.20251011.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../node_modules/.pnpm/wrangler@3.114.15_@cloudflare+workers-types@4.20251011.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-u133CF/middleware-insertion-facade.js", "../../../../node_modules/.pnpm/wrangler@3.114.15_@cloudflare+workers-types@4.20251011.0/node_modules/wrangler/templates/middleware/common.ts", "../bundle-u133CF/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/justin/Tachi/v2/gateway/.wrangler/tmp/dev-BfT35N",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "/**\n * Tachi Gateway - Cloudflare Worker\n * Neo-brutalist pay-per-crawl gateway with real content serving\n */\n\ninterface Env {\n  SUPABASE_URL: string;\n  SUPABASE_KEY: string;\n  BASE_RPC_URL: string;\n  CRAWL_NFT_ADDRESS: string;\n  PROOF_OF_CRAWL_ADDRESS: string;\n  PRICE_PER_REQUEST: string;\n  PUBLISHER_ADDRESS: string;\n}\n\n// Demo content store - replace with actual CMS/database in production\nconst CONTENT_STORE: Record<string, {title: string; content: string; type: string}> = {\n  '/article/ai-training': {\n    title: 'The Future of AI Training Data',\n    content:\n      'AI models require vast amounts of high-quality training data. This article explores the economics of data sourcing and the emerging market for paid content access. Publishers are increasingly seeking fair compensation for their valuable datasets, while AI companies need reliable, legal access to training materials. The Tachi protocol bridges this gap with micropayments and verifiable on-chain logging...',\n    type: 'article'\n  },\n  '/dataset/financial-news': {\n    title: 'Financial News Dataset Q1 2025',\n    content: JSON.stringify({\n      records: 1250,\n      period: '2025-Q1',\n      categories: ['markets', 'crypto', 'regulation'],\n      format: 'json',\n      sample: {\n        date: '2025-01-15',\n        headline: 'Base L2 reaches 10M daily transactions',\n        category: 'crypto',\n        sentiment: 0.82\n      }\n    }),\n    type: 'dataset'\n  },\n  '/api/market-data': {\n    title: 'Real-time Market Data API',\n    content: JSON.stringify({\n      timestamp: new Date().toISOString(),\n      markets: [\n        {symbol: 'BTC/USD', price: 94250, change: 2.3},\n        {symbol: 'ETH/USD', price: 3420, change: 1.8},\n        {symbol: 'BASE/USD', price: 1.2, change: 0.5}\n      ]\n    }),\n    type: 'api'\n  }\n};\n\nexport default {\n  async fetch(request: Request, env: Env): Promise<Response> {\n    const url = new URL(request.url);\n\n    // CORS preflight\n    if (request.method === 'OPTIONS') {\n      return corsResponse();\n    }\n\n    // Health check\n    if (url.pathname === '/health') {\n      return jsonResponse({status: 'ok', service: 'Tachi Gateway', version: '2.0'});\n    }\n\n    // List available content\n    if (url.pathname === '/' || url.pathname === '/catalog') {\n      return jsonResponse({\n        catalog: Object.keys(CONTENT_STORE).map((path) => ({\n          path,\n          title: CONTENT_STORE[path].title,\n          type: CONTENT_STORE[path].type,\n          price: env.PRICE_PER_REQUEST\n        }))\n      });\n    }\n\n    // Check for payment proof\n    const authHeader = request.headers.get('authorization');\n    const paymentTxHash = authHeader?.replace('Bearer ', '');\n\n    if (!paymentTxHash) {\n      // No payment - return 402 Payment Required\n      return paymentRequiredResponse(env, url.pathname);\n    }\n\n    // Verify payment transaction\n    try {\n      const verification = await verifyPayment(paymentTxHash, env);\n\n      if (!verification.valid) {\n        return jsonResponse(\n          {\n            error: 'Payment verification failed',\n            message: verification.reason || 'Invalid or expired payment'\n          },\n          402\n        );\n      }\n\n      // Log the crawl to Supabase\n      await logCrawl({\n        txHash: paymentTxHash,\n        path: url.pathname,\n        publisherAddress: env.PUBLISHER_ADDRESS,\n        crawlerAddress: verification.crawlerAddress,\n        amount: verification.amount,\n        env\n      });\n\n      // Return protected content\n      const content = getContent(url.pathname);\n\n      if (!content) {\n        return jsonResponse({error: 'Content not found', path: url.pathname}, 404);\n      }\n\n      return jsonResponse({\n        success: true,\n        payment: {\n          txHash: paymentTxHash,\n          amount: verification.amount,\n          verified: true\n        },\n        content: {\n          title: content.title,\n          type: content.type,\n          data: content.content\n        }\n      });\n    } catch (error: any) {\n      console.error('Gateway error:', error);\n      return jsonResponse({error: 'Server error', message: error.message}, 500);\n    }\n  }\n};\n\n/**\n * Verify payment transaction on Base\n */\nasync function verifyPayment(\n  txHash: string,\n  env: Env\n): Promise<{\n  valid: boolean;\n  reason?: string;\n  crawlerAddress?: string;\n  amount?: string;\n}> {\n  try {\n    // Get transaction receipt\n    const receiptRes = await fetch(env.BASE_RPC_URL, {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        method: 'eth_getTransactionReceipt',\n        params: [txHash],\n        id: 1\n      })\n    });\n\n    const receiptData = await receiptRes.json();\n    const receipt = receiptData.result;\n\n    if (!receipt) {\n      return {valid: false, reason: 'Transaction not found'};\n    }\n\n    if (receipt.status !== '0x1') {\n      return {valid: false, reason: 'Transaction failed'};\n    }\n\n    // Get transaction details\n    const txRes = await fetch(env.BASE_RPC_URL, {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        method: 'eth_getTransactionByHash',\n        params: [txHash],\n        id: 2\n      })\n    });\n\n    const txData = await txRes.json();\n    const tx = txData.result;\n\n    if (!tx) {\n      return {valid: false, reason: 'Transaction details not found'};\n    }\n\n    // Get block timestamp to check recency\n    const blockRes = await fetch(env.BASE_RPC_URL, {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        method: 'eth_getBlockByNumber',\n        params: [receipt.blockNumber, false],\n        id: 3\n      })\n    });\n\n    const blockData = await blockRes.json();\n    const blockTimestamp = parseInt(blockData.result.timestamp, 16);\n    const now = Math.floor(Date.now() / 1000);\n\n    // Payment must be within last 5 minutes\n    if (now - blockTimestamp > 300) {\n      return {valid: false, reason: 'Payment expired (>5 min old)'};\n    }\n\n    // TODO: Verify amount and recipient by decoding tx input\n    // For MVP, we trust that SDK sent correct amount to correct address\n    // In production, decode the PaymentProcessor.payPublisher() call data\n\n    return {\n      valid: true,\n      crawlerAddress: tx.from,\n      amount: env.PRICE_PER_REQUEST\n    };\n  } catch (error) {\n    console.error('Payment verification error:', error);\n    return {valid: false, reason: 'Verification error'};\n  }\n}\n\n/**\n * Log crawl event to Supabase\n */\nasync function logCrawl(params: {\n  txHash: string;\n  path: string;\n  publisherAddress: string;\n  crawlerAddress?: string;\n  amount?: string;\n  env: Env;\n}): Promise<void> {\n  try {\n    await fetch(`${params.env.SUPABASE_URL}/rest/v1/crawl_logs`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        apikey: params.env.SUPABASE_KEY,\n        Authorization: `Bearer ${params.env.SUPABASE_KEY}`,\n        Prefer: 'return=minimal'\n      },\n      body: JSON.stringify({\n        tx_hash: params.txHash,\n        path: params.path,\n        publisher_address: params.publisherAddress,\n        crawler_address: params.crawlerAddress,\n        timestamp: new Date().toISOString()\n      })\n    });\n\n    // Also log payment\n    if (params.amount && params.crawlerAddress) {\n      await fetch(`${params.env.SUPABASE_URL}/rest/v1/payments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          apikey: params.env.SUPABASE_KEY,\n          Authorization: `Bearer ${params.env.SUPABASE_KEY}`,\n          Prefer: 'return=minimal'\n        },\n        body: JSON.stringify({\n          tx_hash: params.txHash,\n          crawler_address: params.crawlerAddress,\n          publisher_address: params.publisherAddress,\n          amount: params.amount,\n          timestamp: new Date().toISOString()\n        })\n      });\n    }\n  } catch (error) {\n    console.error('Failed to log crawl:', error);\n    // Don't throw - logging failure shouldn't block content\n  }\n}\n\n/**\n * Get content from store\n */\nfunction getContent(path: string): (typeof CONTENT_STORE)[string] | null {\n  return CONTENT_STORE[path] || null;\n}\n\n/**\n * Return 402 Payment Required response\n */\nfunction paymentRequiredResponse(env: Env, path: string): Response {\n  const priceInWei = Math.floor(parseFloat(env.PRICE_PER_REQUEST) * 1e6).toString();\n\n  return new Response(\n    JSON.stringify({\n      error: 'Payment required',\n      message: 'Include payment transaction hash in Authorization header',\n      instructions: {\n        step1: 'Pay publisher via PaymentProcessor contract',\n        step2: 'Include tx hash in Authorization: Bearer <tx_hash>',\n        step3: 'Retry request with payment proof'\n      },\n      payment: {\n        recipient: env.PUBLISHER_ADDRESS,\n        amount: env.PRICE_PER_REQUEST,\n        amountWei: priceInWei,\n        token: 'USDC',\n        chainId: 84532\n      },\n      content: {\n        path,\n        available: !!CONTENT_STORE[path]\n      }\n    }),\n    {\n      status: 402,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Tachi-Price': priceInWei,\n        'X-Tachi-Recipient': env.PUBLISHER_ADDRESS,\n        'X-Tachi-Token': '0x036CbD53842c5426634e7929541eC2318f3dCF7e', // USDC Base Sepolia\n        'X-Tachi-Chain-Id': '84532',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Expose-Headers': 'X-Tachi-Price,X-Tachi-Recipient,X-Tachi-Token,X-Tachi-Chain-Id'\n      }\n    }\n  );\n}\n\n/**\n * Helper: JSON response\n */\nfunction jsonResponse(data: any, status = 200): Response {\n  return new Response(JSON.stringify(data, null, 2), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    }\n  });\n}\n\n/**\n * Helper: CORS response\n */\nfunction corsResponse(): Response {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      'Access-Control-Max-Age': '86400'\n    }\n  });\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/justin/Tachi/v2/gateway/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/justin/Tachi/v2/node_modules/.pnpm/wrangler@3.114.15_@cloudflare+workers-types@4.20251011.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/justin/Tachi/v2/node_modules/.pnpm/wrangler@3.114.15_@cloudflare+workers-types@4.20251011.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/justin/Tachi/v2/gateway/src/index.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/justin/Tachi/v2/gateway/.wrangler/tmp/bundle-u133CF/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/justin/Tachi/v2/node_modules/.pnpm/wrangler@3.114.15_@cloudflare+workers-types@4.20251011.0/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/justin/Tachi/v2/gateway/.wrangler/tmp/bundle-u133CF/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/justin/Tachi/v2/gateway/.wrangler/tmp/bundle-u133CF/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
