/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: buLarKS5F8q92wwXeZGLFH
// Component: yBhMaYUFpYuo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: 8HcwSFor26rJ/component
import OCard from "../../OCard"; // plasmic-import: fweFoRIjeuAZ/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: buLarKS5F8q92wwXeZGLFH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: buLarKS5F8q92wwXeZGLFH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_plasmic_color_type } from "../library_plasmic_color_type/PlasmicStyleTokensProvider"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: buLarKS5F8q92wwXeZGLFH/projectcss
import sty from "./PlasmicOnboarding.module.css"; // plasmic-import: yBhMaYUFpYuo/css

import ProggressingAnimationIcon from "./icons/PlasmicIcon__ProggressingAnimation"; // plasmic-import: VjJuArAbReif/icon
import BoxIcon from "./icons/PlasmicIcon__Box"; // plasmic-import: WrRVDilWSYhF/icon
import UAngleDownIcon from "./icons/PlasmicIcon__UAngleDown"; // plasmic-import: 8iCcbNQFSzwk/icon

createPlasmicElementProxy;

export type PlasmicOnboarding__VariantMembers = {};
export type PlasmicOnboarding__VariantsArgs = {};
type VariantPropType = keyof PlasmicOnboarding__VariantsArgs;
export const PlasmicOnboarding__VariantProps = new Array<VariantPropType>();

export type PlasmicOnboarding__ArgsType = {};
type ArgPropType = keyof PlasmicOnboarding__ArgsType;
export const PlasmicOnboarding__ArgProps = new Array<ArgPropType>();

export type PlasmicOnboarding__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  section?: Flex__<"section">;
  columns?: Flex__<"div">;
  icons?: Flex__<"div">;
  line1?: Flex__<"div">;
  icons2?: Flex__<"div">;
  line2?: Flex__<"div">;
  icons3?: Flex__<"div">;
  line3?: Flex__<"div">;
  icons4?: Flex__<"div">;
  line4?: Flex__<"div">;
  icons5?: Flex__<"div">;
  line5?: Flex__<"div">;
  icons6?: Flex__<"div">;
  line6?: Flex__<"div">;
  icons7?: Flex__<"div">;
  oCard?: Flex__<typeof OCard>;
  metaMask?: Flex__<"div">;
  wcMeta?: Flex__<"div">;
  coinBaseWallet?: Flex__<"div">;
  walletConnect?: Flex__<"div">;
};

export interface DefaultOnboardingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOnboarding__RenderFunc(props: {
  variants: PlasmicOnboarding__VariantsArgs;
  args: PlasmicOnboarding__ArgsType;
  overrides: PlasmicOnboarding__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_library_plasmic_color_type =
    useStyleTokens_library_plasmic_color_type();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_library_plasmic_color_type,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__u4Tb1)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
              onboarding={"unnamedVariant"}
            />
          </div>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column___5CzT)}>
                <div className={classNames(projectcss.all, sty.freeBox__wxLhg)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ij1Ef)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6Tv1Q
                      )}
                    >
                      <div
                        data-plasmic-name={"icons"}
                        data-plasmic-override={overrides.icons}
                        className={classNames(projectcss.all, sty.icons)}
                      >
                        <ProggressingAnimationIcon
                          className={classNames(projectcss.all, sty.svg__xtNs3)}
                          role={"img"}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__otiO)}
                    >
                      <div
                        data-plasmic-name={"line1"}
                        data-plasmic-override={overrides.line1}
                        className={classNames(projectcss.all, sty.line1)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ylkt3)}
                    >
                      <div
                        data-plasmic-name={"icons2"}
                        data-plasmic-override={overrides.icons2}
                        className={classNames(projectcss.all, sty.icons2)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tb6Qz)}
                    >
                      <div
                        data-plasmic-name={"line2"}
                        data-plasmic-override={overrides.line2}
                        className={classNames(projectcss.all, sty.line2)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eeeWf)}
                    >
                      <div
                        data-plasmic-name={"icons3"}
                        data-plasmic-override={overrides.icons3}
                        className={classNames(projectcss.all, sty.icons3)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox___6R8H)}
                    >
                      <div
                        data-plasmic-name={"line3"}
                        data-plasmic-override={overrides.line3}
                        className={classNames(projectcss.all, sty.line3)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cmMwE)}
                    >
                      <div
                        data-plasmic-name={"icons4"}
                        data-plasmic-override={overrides.icons4}
                        className={classNames(projectcss.all, sty.icons4)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__e5Qne)}
                    >
                      <div
                        data-plasmic-name={"line4"}
                        data-plasmic-override={overrides.line4}
                        className={classNames(projectcss.all, sty.line4)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vzlOr)}
                    >
                      <div
                        data-plasmic-name={"icons5"}
                        data-plasmic-override={overrides.icons5}
                        className={classNames(projectcss.all, sty.icons5)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vI199)}
                    >
                      <div
                        data-plasmic-name={"line5"}
                        data-plasmic-override={overrides.line5}
                        className={classNames(projectcss.all, sty.line5)}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9CUjb
                      )}
                    >
                      <div
                        data-plasmic-name={"icons6"}
                        data-plasmic-override={overrides.icons6}
                        className={classNames(projectcss.all, sty.icons6)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jQrcW)}
                    >
                      <div
                        data-plasmic-name={"line6"}
                        data-plasmic-override={overrides.line6}
                        className={classNames(projectcss.all, sty.line6)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wJ0Az)}
                    >
                      <div
                        data-plasmic-name={"icons7"}
                        data-plasmic-override={overrides.icons7}
                        className={classNames(projectcss.all, sty.icons7)}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rDhc5
                      )}
                    >
                      {"wallet"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qyPsX
                      )}
                    >
                      {"domain"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fIydy
                      )}
                    >
                      {"pricing"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aTRv3
                      )}
                    >
                      {"mint"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__awups
                      )}
                    >
                      {"deploy"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nXH
                      )}
                    >
                      {"test"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wxqI
                      )}
                    >
                      {"success"}
                    </div>
                  </div>
                  <OCard
                    data-plasmic-name={"oCard"}
                    data-plasmic-override={overrides.oCard}
                    className={classNames("__wab_instance", sty.oCard)}
                    slot={"connect wallet"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xozzR)}
                    >
                      <div
                        data-plasmic-name={"metaMask"}
                        data-plasmic-override={overrides.metaMask}
                        className={classNames(projectcss.all, sty.metaMask)}
                      >
                        <div
                          data-plasmic-name={"wcMeta"}
                          data-plasmic-override={overrides.wcMeta}
                          className={classNames(projectcss.all, sty.wcMeta)}
                        >
                          <BoxIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__dRpzy
                            )}
                            role={"img"}
                          />

                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__fnVnh)}
                            displayHeight={"20px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"21.33333396911621px"}
                            loading={"lazy"}
                            src={{
                              src: "/plasmic/tachi_landing_page/images/logo2.svg",
                              fullWidth: 21.33333396911621,
                              fullHeight: 20,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cKccm
                          )}
                        >
                          {"MetaMask"}
                        </div>
                        <UAngleDownIcon
                          className={classNames(projectcss.all, sty.svg__kY8Nc)}
                          role={"img"}
                        />
                      </div>
                      <div
                        data-plasmic-name={"coinBaseWallet"}
                        data-plasmic-override={overrides.coinBaseWallet}
                        className={classNames(
                          projectcss.all,
                          sty.coinBaseWallet
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__k32Z)}
                          displayHeight={"32px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"32px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/tachi_landing_page/images/wcCoin.svg",
                            fullWidth: 32,
                            fullHeight: 32,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hXHhP
                          )}
                        >
                          {"CoinBase Wallet"}
                        </div>
                        <UAngleDownIcon
                          className={classNames(projectcss.all, sty.svg__krm1H)}
                          role={"img"}
                        />
                      </div>
                      <div
                        data-plasmic-name={"walletConnect"}
                        data-plasmic-override={overrides.walletConnect}
                        className={classNames(
                          projectcss.all,
                          sty.walletConnect
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__c4YYx)}
                          displayHeight={"32px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"32px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/tachi_landing_page/images/wcConnect.svg",
                            fullWidth: 32,
                            fullHeight: 32,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rXscj
                          )}
                        >
                          {"WalletConnect"}
                        </div>
                        <UAngleDownIcon
                          className={classNames(projectcss.all, sty.svg__bJyxE)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </OCard>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__pIuiA)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___3Bsrg)}
                  displayHeight={"550px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/tachi_landing_page/images/tachiPitchDeck18Png.png",
                    fullWidth: 6000,
                    fullHeight: 3375,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "section",
    "columns",
    "icons",
    "line1",
    "icons2",
    "line2",
    "icons3",
    "line3",
    "icons4",
    "line4",
    "icons5",
    "line5",
    "icons6",
    "line6",
    "icons7",
    "oCard",
    "metaMask",
    "wcMeta",
    "coinBaseWallet",
    "walletConnect"
  ],
  header: ["header"],
  section: [
    "section",
    "columns",
    "icons",
    "line1",
    "icons2",
    "line2",
    "icons3",
    "line3",
    "icons4",
    "line4",
    "icons5",
    "line5",
    "icons6",
    "line6",
    "icons7",
    "oCard",
    "metaMask",
    "wcMeta",
    "coinBaseWallet",
    "walletConnect"
  ],
  columns: [
    "columns",
    "icons",
    "line1",
    "icons2",
    "line2",
    "icons3",
    "line3",
    "icons4",
    "line4",
    "icons5",
    "line5",
    "icons6",
    "line6",
    "icons7",
    "oCard",
    "metaMask",
    "wcMeta",
    "coinBaseWallet",
    "walletConnect"
  ],
  icons: ["icons"],
  line1: ["line1"],
  icons2: ["icons2"],
  line2: ["line2"],
  icons3: ["icons3"],
  line3: ["line3"],
  icons4: ["icons4"],
  line4: ["line4"],
  icons5: ["icons5"],
  line5: ["line5"],
  icons6: ["icons6"],
  line6: ["line6"],
  icons7: ["icons7"],
  oCard: ["oCard", "metaMask", "wcMeta", "coinBaseWallet", "walletConnect"],
  metaMask: ["metaMask", "wcMeta"],
  wcMeta: ["wcMeta"],
  coinBaseWallet: ["coinBaseWallet"],
  walletConnect: ["walletConnect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  section: "section";
  columns: "div";
  icons: "div";
  line1: "div";
  icons2: "div";
  line2: "div";
  icons3: "div";
  line3: "div";
  icons4: "div";
  line4: "div";
  icons5: "div";
  line5: "div";
  icons6: "div";
  line6: "div";
  icons7: "div";
  oCard: typeof OCard;
  metaMask: "div";
  wcMeta: "div";
  coinBaseWallet: "div";
  walletConnect: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOnboarding__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOnboarding__VariantsArgs;
    args?: PlasmicOnboarding__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOnboarding__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOnboarding__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOnboarding__ArgProps,
          internalVariantPropNames: PlasmicOnboarding__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOnboarding__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOnboarding";
  } else {
    func.displayName = `PlasmicOnboarding.${nodeName}`;
  }
  return func;
}

export const PlasmicOnboarding = Object.assign(
  // Top-level PlasmicOnboarding renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    section: makeNodeComponent("section"),
    columns: makeNodeComponent("columns"),
    icons: makeNodeComponent("icons"),
    line1: makeNodeComponent("line1"),
    icons2: makeNodeComponent("icons2"),
    line2: makeNodeComponent("line2"),
    icons3: makeNodeComponent("icons3"),
    line3: makeNodeComponent("line3"),
    icons4: makeNodeComponent("icons4"),
    line4: makeNodeComponent("line4"),
    icons5: makeNodeComponent("icons5"),
    line5: makeNodeComponent("line5"),
    icons6: makeNodeComponent("icons6"),
    line6: makeNodeComponent("line6"),
    icons7: makeNodeComponent("icons7"),
    oCard: makeNodeComponent("oCard"),
    metaMask: makeNodeComponent("metaMask"),
    wcMeta: makeNodeComponent("wcMeta"),
    coinBaseWallet: makeNodeComponent("coinBaseWallet"),
    walletConnect: makeNodeComponent("walletConnect"),

    // Metadata about props expected for PlasmicOnboarding
    internalVariantProps: PlasmicOnboarding__VariantProps,
    internalArgProps: PlasmicOnboarding__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOnboarding;
/* prettier-ignore-end */
