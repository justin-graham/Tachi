/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: buLarKS5F8q92wwXeZGLFH
// Component: Jg04kMN2oI6e

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: 8HcwSFor26rJ/component
import OCard from "../../OCard"; // plasmic-import: fweFoRIjeuAZ/component
import TextField from "../../TextField"; // plasmic-import: R_nijpoBPDhQ/component
import Select from "../../Select"; // plasmic-import: zVqM5LHvNn1j/component
import MenuItem from "../../MenuItem"; // plasmic-import: aqZdogGJdlBv/component
import Button from "../../Button"; // plasmic-import: QX58X5UGGXHk/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: buLarKS5F8q92wwXeZGLFH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: buLarKS5F8q92wwXeZGLFH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_plasmic_color_type } from "../library_plasmic_color_type/PlasmicStyleTokensProvider"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: buLarKS5F8q92wwXeZGLFH/projectcss
import sty from "./PlasmicOnboarding3.module.css"; // plasmic-import: Jg04kMN2oI6e/css

import ProggressingAnimationIcon from "./icons/PlasmicIcon__ProggressingAnimation"; // plasmic-import: VjJuArAbReif/icon
import TickCircleIcon from "./icons/PlasmicIcon__TickCircle"; // plasmic-import: BBx1XSheLP80/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: ZNonLQPDz_Kq/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: tipwXQCWEsbd/icon

createPlasmicElementProxy;

export type PlasmicOnboarding3__VariantMembers = {};
export type PlasmicOnboarding3__VariantsArgs = {};
type VariantPropType = keyof PlasmicOnboarding3__VariantsArgs;
export const PlasmicOnboarding3__VariantProps = new Array<VariantPropType>();

export type PlasmicOnboarding3__ArgsType = {};
type ArgPropType = keyof PlasmicOnboarding3__ArgsType;
export const PlasmicOnboarding3__ArgProps = new Array<ArgPropType>();

export type PlasmicOnboarding3__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  section?: Flex__<"section">;
  columns?: Flex__<"div">;
  icons2?: Flex__<"div">;
  line1?: Flex__<"div">;
  icons8?: Flex__<"div">;
  icons9?: Flex__<"div">;
  icons10?: Flex__<"div">;
  icons11?: Flex__<"div">;
  line2?: Flex__<"div">;
  line3?: Flex__<"div">;
  icons4?: Flex__<"div">;
  line4?: Flex__<"div">;
  icons5?: Flex__<"div">;
  line5?: Flex__<"div">;
  icons6?: Flex__<"div">;
  line6?: Flex__<"div">;
  icons7?: Flex__<"div">;
  oCard?: Flex__<typeof OCard>;
  textField?: Flex__<typeof TextField>;
  select?: Flex__<typeof Select>;
  menuItem?: Flex__<typeof MenuItem>;
  textField2?: Flex__<typeof TextField>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultOnboarding3Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOnboarding3__RenderFunc(props: {
  variants: PlasmicOnboarding3__VariantsArgs;
  args: PlasmicOnboarding3__ArgsType;
  overrides: PlasmicOnboarding3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textField.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textField2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "USDC"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_library_plasmic_color_type =
    useStyleTokens_library_plasmic_color_type();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_library_plasmic_color_type,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__hadXl)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
              onboarding={"unnamedVariant"}
            />
          </div>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__onDxu)}>
                <div className={classNames(projectcss.all, sty.freeBox__tgIpi)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__u8Bmk)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fVBwM)}
                    >
                      <div
                        data-plasmic-name={"icons2"}
                        data-plasmic-override={overrides.icons2}
                        className={classNames(projectcss.all, sty.icons2)}
                      >
                        <ProggressingAnimationIcon
                          className={classNames(projectcss.all, sty.svg__fcRgi)}
                          role={"img"}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2XOgo
                      )}
                    >
                      <div
                        data-plasmic-name={"line1"}
                        data-plasmic-override={overrides.line1}
                        className={classNames(projectcss.all, sty.line1)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gmNm6)}
                    >
                      <div
                        data-plasmic-name={"icons8"}
                        data-plasmic-override={overrides.icons8}
                        className={classNames(projectcss.all, sty.icons8)}
                      >
                        <div
                          data-plasmic-name={"icons9"}
                          data-plasmic-override={overrides.icons9}
                          className={classNames(projectcss.all, sty.icons9)}
                        >
                          <TickCircleIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__siMqA
                            )}
                            role={"img"}
                          />
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__asuKy)}
                    >
                      <div
                        data-plasmic-name={"icons10"}
                        data-plasmic-override={overrides.icons10}
                        className={classNames(projectcss.all, sty.icons10)}
                      >
                        <div
                          data-plasmic-name={"icons11"}
                          data-plasmic-override={overrides.icons11}
                          className={classNames(projectcss.all, sty.icons11)}
                        >
                          <TickCircleIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__crTdb
                            )}
                            role={"img"}
                          />
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nkTyi)}
                    >
                      <div
                        data-plasmic-name={"line2"}
                        data-plasmic-override={overrides.line2}
                        className={classNames(projectcss.all, sty.line2)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yXeaW)}
                    >
                      <div
                        data-plasmic-name={"line3"}
                        data-plasmic-override={overrides.line3}
                        className={classNames(projectcss.all, sty.line3)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dY2Bd)}
                    >
                      <div
                        data-plasmic-name={"icons4"}
                        data-plasmic-override={overrides.icons4}
                        className={classNames(projectcss.all, sty.icons4)}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0Rezy
                      )}
                    >
                      <div
                        data-plasmic-name={"line4"}
                        data-plasmic-override={overrides.line4}
                        className={classNames(projectcss.all, sty.line4)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__b5FjD)}
                    >
                      <div
                        data-plasmic-name={"icons5"}
                        data-plasmic-override={overrides.icons5}
                        className={classNames(projectcss.all, sty.icons5)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qTkdk)}
                    >
                      <div
                        data-plasmic-name={"line5"}
                        data-plasmic-override={overrides.line5}
                        className={classNames(projectcss.all, sty.line5)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qAdpl)}
                    >
                      <div
                        data-plasmic-name={"icons6"}
                        data-plasmic-override={overrides.icons6}
                        className={classNames(projectcss.all, sty.icons6)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bzFwe)}
                    >
                      <div
                        data-plasmic-name={"line6"}
                        data-plasmic-override={overrides.line6}
                        className={classNames(projectcss.all, sty.line6)}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__u3Vym)}
                    >
                      <div
                        data-plasmic-name={"icons7"}
                        data-plasmic-override={overrides.icons7}
                        className={classNames(projectcss.all, sty.icons7)}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wEyK
                      )}
                    >
                      {"wallet"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ojzkq
                      )}
                    >
                      {"domain"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jmoEt
                      )}
                    >
                      {"pricing"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aZvDh
                      )}
                    >
                      {"mint"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1BnGo
                      )}
                    >
                      {"deploy"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jHpsU
                      )}
                    >
                      {"test"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y5Nr8
                      )}
                    >
                      {"success"}
                    </div>
                  </div>
                  <OCard
                    data-plasmic-name={"oCard"}
                    data-plasmic-override={overrides.oCard}
                    className={classNames("__wab_instance", sty.oCard)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Uq4
                        )}
                      >
                        {"pricing configuration"}
                      </div>
                    }
                  >
                    <TextField
                      data-plasmic-name={"textField"}
                      data-plasmic-override={overrides.textField}
                      className={classNames("__wab_instance", sty.textField)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gzhoD
                          )}
                        >
                          {"price-per-crawl"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "textField",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"$0.01"}
                      value={generateStateValueProp($state, [
                        "textField",
                        "value"
                      ])}
                    />

                    <Select
                      data-plasmic-name={"select"}
                      data-plasmic-override={overrides.select}
                      className={classNames("__wab_instance", sty.select)}
                      isOpen={generateStateValueProp($state, [
                        "select",
                        "isOpen"
                      ])}
                      items={
                        <MenuItem
                          data-plasmic-name={"menuItem"}
                          data-plasmic-override={overrides.menuItem}
                          label={"USDC"}
                          value={"USDC"}
                        />
                      }
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jxcfg
                          )}
                        >
                          {"currency"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select",
                          "isOpen"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"USDC"}
                      value={generateStateValueProp($state, [
                        "select",
                        "value"
                      ])}
                    />

                    <TextField
                      data-plasmic-name={"textField2"}
                      data-plasmic-override={overrides.textField2}
                      className={classNames("__wab_instance", sty.textField2)}
                      disabled={true}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cirGv
                          )}
                        >
                          {"dynamic pricing"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "textField2",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={
                        "def dynamic_pricing(base_price, demand_level):"
                      }
                      value={generateStateValueProp($state, [
                        "textField2",
                        "value"
                      ])}
                    />
                  </OCard>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__qd9Fb)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__n4ONi)}
                    color={"outlineBlue"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6Tt7
                      )}
                    >
                      {"back"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__e69Og)}
                    color={"tachi6"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__icuov
                      )}
                    >
                      {"continue"}
                    </div>
                  </Button>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column___5Vvy)}>
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"550px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/images/onboarding/wave4.png",
                    fullWidth: 4800,
                    fullHeight: 2700,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "section",
    "columns",
    "icons2",
    "line1",
    "icons8",
    "icons9",
    "icons10",
    "icons11",
    "line2",
    "line3",
    "icons4",
    "line4",
    "icons5",
    "line5",
    "icons6",
    "line6",
    "icons7",
    "oCard",
    "textField",
    "select",
    "menuItem",
    "textField2",
    "img"
  ],
  header: ["header"],
  section: [
    "section",
    "columns",
    "icons2",
    "line1",
    "icons8",
    "icons9",
    "icons10",
    "icons11",
    "line2",
    "line3",
    "icons4",
    "line4",
    "icons5",
    "line5",
    "icons6",
    "line6",
    "icons7",
    "oCard",
    "textField",
    "select",
    "menuItem",
    "textField2",
    "img"
  ],
  columns: [
    "columns",
    "icons2",
    "line1",
    "icons8",
    "icons9",
    "icons10",
    "icons11",
    "line2",
    "line3",
    "icons4",
    "line4",
    "icons5",
    "line5",
    "icons6",
    "line6",
    "icons7",
    "oCard",
    "textField",
    "select",
    "menuItem",
    "textField2",
    "img"
  ],
  icons2: ["icons2"],
  line1: ["line1"],
  icons8: ["icons8", "icons9"],
  icons9: ["icons9"],
  icons10: ["icons10", "icons11"],
  icons11: ["icons11"],
  line2: ["line2"],
  line3: ["line3"],
  icons4: ["icons4"],
  line4: ["line4"],
  icons5: ["icons5"],
  line5: ["line5"],
  icons6: ["icons6"],
  line6: ["line6"],
  icons7: ["icons7"],
  oCard: ["oCard", "textField", "select", "menuItem", "textField2"],
  textField: ["textField"],
  select: ["select", "menuItem"],
  menuItem: ["menuItem"],
  textField2: ["textField2"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  section: "section";
  columns: "div";
  icons2: "div";
  line1: "div";
  icons8: "div";
  icons9: "div";
  icons10: "div";
  icons11: "div";
  line2: "div";
  line3: "div";
  icons4: "div";
  line4: "div";
  icons5: "div";
  line5: "div";
  icons6: "div";
  line6: "div";
  icons7: "div";
  oCard: typeof OCard;
  textField: typeof TextField;
  select: typeof Select;
  menuItem: typeof MenuItem;
  textField2: typeof TextField;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOnboarding3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOnboarding3__VariantsArgs;
    args?: PlasmicOnboarding3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOnboarding3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOnboarding3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOnboarding3__ArgProps,
          internalVariantPropNames: PlasmicOnboarding3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOnboarding3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOnboarding3";
  } else {
    func.displayName = `PlasmicOnboarding3.${nodeName}`;
  }
  return func;
}

export const PlasmicOnboarding3 = Object.assign(
  // Top-level PlasmicOnboarding3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    section: makeNodeComponent("section"),
    columns: makeNodeComponent("columns"),
    icons2: makeNodeComponent("icons2"),
    line1: makeNodeComponent("line1"),
    icons8: makeNodeComponent("icons8"),
    icons9: makeNodeComponent("icons9"),
    icons10: makeNodeComponent("icons10"),
    icons11: makeNodeComponent("icons11"),
    line2: makeNodeComponent("line2"),
    line3: makeNodeComponent("line3"),
    icons4: makeNodeComponent("icons4"),
    line4: makeNodeComponent("line4"),
    icons5: makeNodeComponent("icons5"),
    line5: makeNodeComponent("line5"),
    icons6: makeNodeComponent("icons6"),
    line6: makeNodeComponent("line6"),
    icons7: makeNodeComponent("icons7"),
    oCard: makeNodeComponent("oCard"),
    textField: makeNodeComponent("textField"),
    select: makeNodeComponent("select"),
    menuItem: makeNodeComponent("menuItem"),
    textField2: makeNodeComponent("textField2"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicOnboarding3
    internalVariantProps: PlasmicOnboarding3__VariantProps,
    internalArgProps: PlasmicOnboarding3__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicOnboarding3;
/* prettier-ignore-end */
