/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: buLarKS5F8q92wwXeZGLFH
// Component: fweFoRIjeuAZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: buLarKS5F8q92wwXeZGLFH/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: buLarKS5F8q92wwXeZGLFH/styleTokensProvider
import { _useStyleTokens as useStyleTokens_library_plasmic_color_type } from "../library_plasmic_color_type/PlasmicStyleTokensProvider"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: buLarKS5F8q92wwXeZGLFH/projectcss
import sty from "./PlasmicOCard.module.css"; // plasmic-import: fweFoRIjeuAZ/css

createPlasmicElementProxy;

export type PlasmicOCard__VariantMembers = {};
export type PlasmicOCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicOCard__VariantsArgs;
export const PlasmicOCard__VariantProps = new Array<VariantPropType>();

export type PlasmicOCard__ArgsType = {
  slot?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicOCard__ArgsType;
export const PlasmicOCard__ArgProps = new Array<ArgPropType>(
  "slot",
  "children"
);

export type PlasmicOCard__OverridesType = {
  root?: Flex__<"div">;
  signUp?: Flex__<"div">;
  header?: Flex__<"div">;
  titleRow?: Flex__<"div">;
  title?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultOCardProps {
  slot?: React.ReactNode;
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOCard__RenderFunc(props: {
  variants: PlasmicOCard__VariantsArgs;
  args: PlasmicOCard__ArgsType;
  overrides: PlasmicOCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_library_plasmic_color_type =
    useStyleTokens_library_plasmic_color_type();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_library_plasmic_color_type,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"signUp"}
        data-plasmic-override={overrides.signUp}
        className={classNames(projectcss.all, sty.signUp)}
      >
        <div
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(projectcss.all, sty.header)}
        >
          <div
            data-plasmic-name={"titleRow"}
            data-plasmic-override={overrides.titleRow}
            className={classNames(projectcss.all, sty.titleRow)}
          >
            <div
              data-plasmic-name={"title"}
              data-plasmic-override={overrides.title}
              className={classNames(projectcss.all, sty.title)}
            >
              {renderPlasmicSlot({
                defaultContents: "Connect Wallet",
                value: args.slot,
                className: classNames(sty.slotTargetSlot)
              })}
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {renderPlasmicSlot({
            defaultContents: null,
            value: args.children
          })}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "signUp", "header", "titleRow", "title", "freeBox"],
  signUp: ["signUp", "header", "titleRow", "title", "freeBox"],
  header: ["header", "titleRow", "title"],
  titleRow: ["titleRow", "title"],
  title: ["title"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  signUp: "div";
  header: "div";
  titleRow: "div";
  title: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOCard__VariantsArgs;
    args?: PlasmicOCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOCard__ArgProps,
          internalVariantPropNames: PlasmicOCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOCard";
  } else {
    func.displayName = `PlasmicOCard.${nodeName}`;
  }
  return func;
}

export const PlasmicOCard = Object.assign(
  // Top-level PlasmicOCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    signUp: makeNodeComponent("signUp"),
    header: makeNodeComponent("header"),
    titleRow: makeNodeComponent("titleRow"),
    title: makeNodeComponent("title"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicOCard
    internalVariantProps: PlasmicOCard__VariantProps,
    internalArgProps: PlasmicOCard__ArgProps
  }
);

export default PlasmicOCard;
/* prettier-ignore-end */
