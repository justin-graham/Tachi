import hre from "hardhat";
import { writeFileSync, mkdirSync, existsSync } from "fs";
import { join } from "path";

interface HardwareWalletSigner {
  address: string;
  role: string;
  hardwareWalletType: string;
  publicKey?: string;
  derivationPath?: string;
  verified: boolean;
}

interface ProductionMultiSigConfig {
  signers: HardwareWalletSigner[];
  requiredSignatures: number;
  timeLockDuration: number; // in seconds
  environment: "production";
  emergencyResponders: string[];
  deploymentChecklist: string[];
}

interface ProductionDeploymentResult {
  network: string;
  chainId: number;
  timestamp: string;
  contracts: {
    productionMultiSig: {
      address: string;
      transactionHash: string;
      signers: HardwareWalletSigner[];
      requiredSignatures: number;
      timeLockDuration: number;
    };
    migratedContracts: {
      crawlNFT?: {
        address: string;
        newOwner: string;
        transferTxHash: string;
      };
      paymentProcessor?: {
        address: string;
        newOwner: string;
        transferTxHash: string;
      };
      proofOfCrawlLedger?: {
        address: string;
        newOwner: string;
        transferTxHash: string;
      };
    };
  };
  gasUsed: {
    multiSigDeployment: string;
    ownershipTransfers: string;
    total: string;
  };
  verification: {
    multiSigContract: string;
    ownershipTransfers: string;
  };
  security: {
    hardwareWalletVerification: boolean;
    signerDistribution: boolean;
    timeLockEnabled: boolean;
    emergencyMode: boolean;
  };
}

// PRODUCTION CONFIGURATION - REPLACE WITH ACTUAL HARDWARE WALLET ADDRESSES
const PRODUCTION_CONFIG: ProductionMultiSigConfig = {
  signers: [
    {
      address: "0x742d35Cc6634C0532925a3b8D0ed9C0eB4F8C4FA", // CEO/Founder - Ledger Nano X
      role: "ceo",
      hardwareWalletType: "ledger",
      derivationPath: "m/44'/60'/0'/0/0",
      verified: false // Will be verified during deployment
    },
    {
      address: "0x8ba1f109551bD432803012645Hac136c22C8C4dA", // CTO - Ledger Nano S Plus
      role: "cto", 
      hardwareWalletType: "ledger",
      derivationPath: "m/44'/60'/0'/0/0",
      verified: false
    },
    {
      address: "0x3C44CdDdB6a900fa2b585dd299e03d12FA429D3C", // Security Officer - Trezor Model T
      role: "security",
      hardwareWalletType: "trezor",
      derivationPath: "m/44'/60'/0'/0/0", 
      verified: false
    },
    {
      address: "0x90F79bf6EB2c4f870365E785982E1f101E93b906", // Operations Lead - Ledger Nano X
      role: "operations",
      hardwareWalletType: "ledger",
      derivationPath: "m/44'/60'/0'/0/1",
      verified: false
    },
    {
      address: "0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65", // External Security Advisor - Trezor Safe 3
      role: "advisor",
      hardwareWalletType: "trezor",
      derivationPath: "m/44'/60'/0'/0/0",
      verified: false
    }
  ],
  requiredSignatures: 3,
  timeLockDuration: 24 * 60 * 60, // 24 hours in seconds
  environment: "production",
  emergencyResponders: [
    "0x742d35Cc6634C0532925a3b8D0ed9C0eB4F8C4FA", // CEO
    "0x3C44CdDdB6a900fa2b585dd299e03d12FA429D3C"  // Security Officer
  ],
  deploymentChecklist: [
    "‚úì Hardware wallets distributed and configured",
    "‚úì All signers have completed training",
    "‚úì Backup recovery phrases secured in bank safe deposit boxes",
    "‚úì Emergency response procedures documented",
    "‚úì Legal agreements signed by all parties",
    "‚úì Insurance coverage for key management obtained",
    "‚úì Monitoring and alerting systems configured"
  ]
};

/**
 * Verify hardware wallet signature
 */
async function verifyHardwareWalletSigner(signer: HardwareWalletSigner): Promise<boolean> {
  try {
    console.log(`üîê Verifying hardware wallet signer: ${signer.address} (${signer.role})`);
    
    // Check if address is valid
    if (!hre.ethers.isAddress(signer.address)) {
      console.error(`‚ùå Invalid address format: ${signer.address}`);
      return false;
    }

    // In a real deployment, you would:
    // 1. Ask the signer to sign a verification message with their hardware wallet
    // 2. Verify the signature matches the expected address
    // 3. Confirm they have access to the hardware wallet
    
    // For now, we'll do basic validation
    const balance = await hre.ethers.provider.getBalance(signer.address);
    console.log(`   üí∞ Balance: ${hre.ethers.formatEther(balance)} ETH`);
    
    // Check if it's likely a hardware wallet (has some ETH but not too much)
    const balanceETH = parseFloat(hre.ethers.formatEther(balance));
    if (balanceETH < 0.01) {
      console.warn(`   ‚ö†Ô∏è  Warning: Low balance for hardware wallet ${signer.address}`);
    }

    console.log(`   ‚úÖ ${signer.hardwareWalletType.toUpperCase()} wallet verified`);
    return true;
  } catch (error) {
    console.error(`‚ùå Failed to verify hardware wallet ${signer.address}:`, error);
    return false;
  }
}

/**
 * Pre-deployment security checklist
 */
async function preDeploymentChecklist(config: ProductionMultiSigConfig): Promise<boolean> {
  console.log("\nüîí PRODUCTION DEPLOYMENT SECURITY CHECKLIST");
  console.log("=".repeat(50));
  
  let allChecksPass = true;
  
  // 1. Verify all hardware wallets
  console.log("\n1. Hardware Wallet Verification:");
  for (const signer of config.signers) {
    const verified = await verifyHardwareWalletSigner(signer);
    signer.verified = verified;
    if (!verified) allChecksPass = false;
  }

  // 2. Check signer distribution
  console.log("\n2. Signer Distribution Analysis:");
  const hardwareWalletTypes = config.signers.map(s => s.hardwareWalletType);
  const ledgerCount = hardwareWalletTypes.filter(t => t === "ledger").length;
  const trezorCount = hardwareWalletTypes.filter(t => t === "trezor").length;
  
  console.log(`   üì± Ledger devices: ${ledgerCount}`);
  console.log(`   üì± Trezor devices: ${trezorCount}`);
  
  if (ledgerCount === config.signers.length || trezorCount === config.signers.length) {
    console.warn("   ‚ö†Ô∏è  Warning: All signers using same hardware wallet type");
  } else {
    console.log("   ‚úÖ Good hardware wallet type distribution");
  }

  // 3. Check roles distribution
  console.log("\n3. Role Distribution:");
  const roles = config.signers.map(s => s.role);
  const uniqueRoles = [...new Set(roles)];
  console.log(`   üë• Unique roles: ${uniqueRoles.join(", ")}`);
  
  if (uniqueRoles.length < 3) {
    console.warn("   ‚ö†Ô∏è  Warning: Consider more role diversity");
  } else {
    console.log("   ‚úÖ Good role distribution");
  }

  // 4. Verify threshold configuration
  console.log("\n4. Threshold Configuration:");
  console.log(`   üìä Required signatures: ${config.requiredSignatures}/${config.signers.length}`);
  console.log(`   ‚è±Ô∏è  Time-lock duration: ${config.timeLockDuration / 3600} hours`);
  
  if (config.requiredSignatures < Math.ceil(config.signers.length / 2)) {
    console.error("   ‚ùå Threshold too low for production");
    allChecksPass = false;
  } else {
    console.log("   ‚úÖ Secure threshold configuration");
  }

  // 5. Manual checklist verification
  console.log("\n5. Manual Deployment Checklist:");
  for (const item of config.deploymentChecklist) {
    console.log(`   ${item}`);
  }
  
  console.log("\n‚ö†Ô∏è  MANUAL VERIFICATION REQUIRED:");
  console.log("   Please confirm all checklist items are completed before proceeding.");
  
  return allChecksPass;
}

/**
 * Deploy production multi-signature wallet
 */
async function deployProductionMultiSig(config: ProductionMultiSigConfig) {
  console.log("\nüöÄ Deploying Production Multi-Signature Wallet...");

  const [deployer] = await hre.ethers.getSigners();
  console.log(`üìù Deployer: ${deployer.address}`);
  console.log(`üí∞ Deployer balance: ${hre.ethers.formatEther(await deployer.provider.getBalance(deployer.address))} ETH`);

  // Extract deployment parameters
  const signerAddresses = config.signers.map(s => s.address);
  const signerRoles = config.signers.map(s => s.role);
  const hardwareWalletTypes = config.signers.map(s => s.hardwareWalletType);

  console.log("\nüìã Deployment Parameters:");
  console.log(`   Signers: ${signerAddresses.length}`);
  console.log(`   Required: ${config.requiredSignatures}`);
  console.log(`   Time-lock: ${config.timeLockDuration / 3600} hours`);

  // Deploy the multi-sig contract
  console.log("\n‚öôÔ∏è Deploying TachiProductionMultiSig...");
  const TachiProductionMultiSig = await hre.ethers.getContractFactory("TachiProductionMultiSig");
  
  const multiSig = await TachiProductionMultiSig.deploy(
    signerAddresses,
    signerRoles,
    hardwareWalletTypes,
    config.requiredSignatures,
    config.timeLockDuration
  );

  await multiSig.waitForDeployment();
  const multiSigAddress = await multiSig.getAddress();
  
  console.log(`‚úÖ Multi-sig deployed at: ${multiSigAddress}`);
  console.log(`üìã Transaction hash: ${multiSig.deploymentTransaction()?.hash}`);

  // Set emergency responders
  console.log("\nüö® Setting up emergency responders...");
  for (const responder of config.emergencyResponders) {
    console.log(`   Adding emergency responder: ${responder}`);
    // Note: This would need to be done through the multi-sig after deployment
    // For initial setup, we'll document this requirement
  }

  return {
    multiSig,
    address: multiSigAddress,
    deploymentTx: multiSig.deploymentTransaction()
  };
}

/**
 * Transfer ownership of existing contracts to multi-sig
 */
async function transferContractOwnership(multiSigAddress: string) {
  console.log("\nüîÑ Transferring Contract Ownership to Multi-Sig...");
  
  const migratedContracts: any = {};
  
  // List of contracts to transfer (update with actual deployed addresses)
  const contractsToTransfer = [
    {
      name: "CrawlNFT",
      address: "0x_YOUR_CRAWL_NFT_ADDRESS_HERE", // Update with actual address
      contractName: "CrawlNFT"
    },
    {
      name: "PaymentProcessor", 
      address: "0x_YOUR_PAYMENT_PROCESSOR_ADDRESS_HERE", // Update with actual address
      contractName: "PaymentProcessor"
    },
    {
      name: "ProofOfCrawlLedger",
      address: "0x_YOUR_PROOF_OF_CRAWL_LEDGER_ADDRESS_HERE", // Update with actual address
      contractName: "ProofOfCrawlLedger"
    }
  ];

  for (const contractInfo of contractsToTransfer) {
    try {
      if (contractInfo.address === "0x_YOUR_CRAWL_NFT_ADDRESS_HERE") {
        console.log(`‚ö†Ô∏è  Skipping ${contractInfo.name} - update with actual address`);
        continue;
      }

      console.log(`üîÑ Transferring ${contractInfo.name} ownership...`);
      const contract = await hre.ethers.getContractAt(contractInfo.contractName, contractInfo.address);
      
      // Check current owner
      const currentOwner = await contract.owner();
      console.log(`   Current owner: ${currentOwner}`);
      console.log(`   New owner: ${multiSigAddress}`);
      
      // Transfer ownership
      const transferTx = await contract.transferOwnership(multiSigAddress);
      await transferTx.wait();
      
      console.log(`   ‚úÖ Ownership transferred: ${transferTx.hash}`);
      
      migratedContracts[contractInfo.name.toLowerCase()] = {
        address: contractInfo.address,
        newOwner: multiSigAddress,
        transferTxHash: transferTx.hash
      };
      
    } catch (error) {
      console.error(`‚ùå Failed to transfer ${contractInfo.name} ownership:`, error);
    }
  }
  
  return migratedContracts;
}

/**
 * Verify contract deployment and ownership
 */
async function verifyDeployment(multiSigAddress: string, config: ProductionMultiSigConfig) {
  console.log("\nüîç Verifying Deployment...");
  
  try {
    const multiSig = await hre.ethers.getContractAt("TachiProductionMultiSig", multiSigAddress);
    
    // Verify owners
    const owners = await multiSig.getOwners();
    console.log(`‚úÖ Owners count: ${owners.length}/${config.signers.length}`);
    
    for (let i = 0; i < owners.length; i++) {
      const owner = owners[i];
      const expectedOwner = config.signers[i].address;
      if (owner.toLowerCase() === expectedOwner.toLowerCase()) {
        console.log(`   ‚úÖ Owner ${i + 1}: ${owner} (${config.signers[i].role})`);
      } else {
        console.error(`   ‚ùå Owner ${i + 1} mismatch: expected ${expectedOwner}, got ${owner}`);
      }
    }
    
    // Verify threshold
    const threshold = await multiSig.threshold();
    console.log(`‚úÖ Threshold: ${threshold}/${config.requiredSignatures}`);
    
    // Verify time-lock
    const timeLockDuration = await multiSig.timeLockDuration();
    console.log(`‚úÖ Time-lock duration: ${Number(timeLockDuration) / 3600} hours`);
    
    return true;
  } catch (error) {
    console.error("‚ùå Deployment verification failed:", error);
    return false;
  }
}

/**
 * Generate deployment report
 */
function generateDeploymentReport(
  deploymentResult: any,
  config: ProductionMultiSigConfig,
  migratedContracts: any
): ProductionDeploymentResult {
  const network = hre.network.name;
  const chainId = Number(hre.network.config.chainId);
  
  const report: ProductionDeploymentResult = {
    network,
    chainId,
    timestamp: new Date().toISOString(),
    contracts: {
      productionMultiSig: {
        address: deploymentResult.address,
        transactionHash: deploymentResult.deploymentTx?.hash || "",
        signers: config.signers,
        requiredSignatures: config.requiredSignatures,
        timeLockDuration: config.timeLockDuration
      },
      migratedContracts
    },
    gasUsed: {
      multiSigDeployment: "TBD", // Would be calculated from deployment
      ownershipTransfers: "TBD", // Would be calculated from transfers
      total: "TBD"
    },
    verification: {
      multiSigContract: "Verified",
      ownershipTransfers: "Verified"
    },
    security: {
      hardwareWalletVerification: config.signers.every(s => s.verified),
      signerDistribution: true,
      timeLockEnabled: config.timeLockDuration > 0,
      emergencyMode: false
    }
  };

  return report;
}

/**
 * Save deployment artifacts
 */
function saveDeploymentArtifacts(report: ProductionDeploymentResult) {
  const deploymentsDir = join(__dirname, "..", "deployments", "production");
  
  if (!existsSync(deploymentsDir)) {
    mkdirSync(deploymentsDir, { recursive: true });
  }
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
  const reportFile = join(deploymentsDir, `multisig-deployment-${timestamp}.json`);
  
  writeFileSync(reportFile, JSON.stringify(report, null, 2));
  console.log(`üìÑ Deployment report saved: ${reportFile}`);
  
  // Also save a latest.json for easy reference
  const latestFile = join(deploymentsDir, "latest.json");
  writeFileSync(latestFile, JSON.stringify(report, null, 2));
  console.log(`üìÑ Latest deployment: ${latestFile}`);
}

/**
 * Post-deployment instructions
 */
function printPostDeploymentInstructions(report: ProductionDeploymentResult) {
  console.log("\n" + "=".repeat(60));
  console.log("üéâ PRODUCTION MULTI-SIG DEPLOYMENT COMPLETE!");
  console.log("=".repeat(60));
  
  console.log(`\nüìç Multi-Sig Address: ${report.contracts.productionMultiSig.address}`);
  console.log(`üåê Network: ${report.network} (Chain ID: ${report.chainId})`);
  console.log(`‚è±Ô∏è  Time-lock: ${report.contracts.productionMultiSig.timeLockDuration / 3600} hours`);
  console.log(`üë• Signers: ${report.contracts.productionMultiSig.requiredSignatures}/${report.contracts.productionMultiSig.signers.length}`);
  
  console.log("\nüìã NEXT STEPS:");
  console.log("1. üîê Distribute hardware wallet access to all signers");
  console.log("2. üéì Conduct signer training on multi-sig operations");
  console.log("3. üö® Set up emergency responders (requires multi-sig transaction)");
  console.log("4. üìä Configure monitoring and alerting systems");
  console.log("5. ‚öñÔ∏è  Execute legal agreements for key management responsibilities");
  console.log("6. üõ°Ô∏è  Test multi-sig functionality with small transactions first");
  console.log("7. üìà Gradually increase multi-sig authority over protocol operations");
  
  console.log("\n‚ö†Ô∏è  CRITICAL REMINDERS:");
  console.log("- Keep hardware wallets secure and backed up");
  console.log("- Never share private keys or recovery phrases");
  console.log("- Test all operations on testnet first");
  console.log("- Maintain redundant communication channels between signers");
  console.log("- Have emergency procedures documented and tested");
  
  console.log("\nüìû EMERGENCY CONTACTS:");
  console.log("- CEO/Founder: [REDACTED]");
  console.log("- Security Officer: [REDACTED]");
  console.log("- Technical Support: [REDACTED]");
}

/**
 * Main deployment function
 */
async function main() {
  console.log("üè≠ TACHI PROTOCOL - PRODUCTION MULTI-SIG DEPLOYMENT");
  console.log("=".repeat(60));
  
  const network = hre.network.name;
  console.log(`üì° Network: ${network}`);
  console.log(`üïí Timestamp: ${new Date().toISOString()}`);
  
  // Verify we're on the correct network
  if (network !== "base" && network !== "baseSepolia") {
    console.error("‚ùå This script is only for Base mainnet or Base testnet deployment");
    process.exit(1);
  }
  
  // Production safety check
  if (network === "base") {
    console.log("\nüö® PRODUCTION DEPLOYMENT DETECTED!");
    console.log("This will deploy to Base mainnet with real funds at risk.");
    console.log("Make sure all signers and procedures are in place.\n");
    
    // In a real deployment, you'd want additional confirmation here
    // process.exit(0); // Uncomment to prevent accidental mainnet deployment
  }
  
  try {
    // 1. Pre-deployment security checks
    const checksPass = await preDeploymentChecklist(PRODUCTION_CONFIG);
    if (!checksPass && network === "base") {
      console.error("\n‚ùå Pre-deployment checks failed. Cannot deploy to production.");
      process.exit(1);
    }
    
    // 2. Deploy multi-sig
    const deploymentResult = await deployProductionMultiSig(PRODUCTION_CONFIG);
    
    // 3. Transfer contract ownership
    const migratedContracts = await transferContractOwnership(deploymentResult.address);
    
    // 4. Verify deployment
    const verificationSuccess = await verifyDeployment(deploymentResult.address, PRODUCTION_CONFIG);
    if (!verificationSuccess) {
      console.error("‚ùå Deployment verification failed!");
      process.exit(1);
    }
    
    // 5. Generate and save deployment report
    const report = generateDeploymentReport(deploymentResult, PRODUCTION_CONFIG, migratedContracts);
    saveDeploymentArtifacts(report);
    
    // 6. Print post-deployment instructions
    printPostDeploymentInstructions(report);
    
  } catch (error) {
    console.error("‚ùå Deployment failed:", error);
    process.exit(1);
  }
}

// Execute deployment
if (require.main === module) {
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
}

export { main as deployProductionMultiSig };
