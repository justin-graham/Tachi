// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Publisher extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Publisher entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Publisher must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Publisher", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Publisher | null {
    return changetype<Publisher | null>(
      store.get_in_block("Publisher", id.toHexString()),
    );
  }

  static load(id: Bytes): Publisher | null {
    return changetype<Publisher | null>(
      store.get("Publisher", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get licenses(): LicenseLoader {
    return new LicenseLoader(
      "Publisher",
      this.get("id")!.toBytes().toHexString(),
      "licenses",
    );
  }

  get totalEarnings(): BigInt {
    let value = this.get("totalEarnings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalEarnings(value: BigInt) {
    this.set("totalEarnings", Value.fromBigInt(value));
  }

  get totalCrawls(): BigInt {
    let value = this.get("totalCrawls");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCrawls(value: BigInt) {
    this.set("totalCrawls", Value.fromBigInt(value));
  }

  get totalWithdrawn(): BigInt {
    let value = this.get("totalWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalWithdrawn(value: BigInt) {
    this.set("totalWithdrawn", Value.fromBigInt(value));
  }

  get activeLicenses(): BigInt {
    let value = this.get("activeLicenses");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeLicenses(value: BigInt) {
    this.set("activeLicenses", Value.fromBigInt(value));
  }

  get averageEarningPerCrawl(): BigDecimal {
    let value = this.get("averageEarningPerCrawl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageEarningPerCrawl(value: BigDecimal) {
    this.set("averageEarningPerCrawl", Value.fromBigDecimal(value));
  }

  get activities(): PublisherActivityLoader {
    return new PublisherActivityLoader(
      "Publisher",
      this.get("id")!.toBytes().toHexString(),
      "activities",
    );
  }

  get dailyStats(): PublisherDailyStatsLoader {
    return new PublisherDailyStatsLoader(
      "Publisher",
      this.get("id")!.toBytes().toHexString(),
      "dailyStats",
    );
  }

  get firstCrawlAt(): BigInt | null {
    let value = this.get("firstCrawlAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set firstCrawlAt(value: BigInt | null) {
    if (!value) {
      this.unset("firstCrawlAt");
    } else {
      this.set("firstCrawlAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastCrawlAt(): BigInt | null {
    let value = this.get("lastCrawlAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastCrawlAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastCrawlAt");
    } else {
      this.set("lastCrawlAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class License extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save License entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type License must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("License", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): License | null {
    return changetype<License | null>(
      store.get_in_block("License", id.toHexString()),
    );
  }

  static load(id: Bytes): License | null {
    return changetype<License | null>(store.get("License", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get publisher(): Bytes {
    let value = this.get("publisher");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set publisher(value: Bytes) {
    this.set("publisher", Value.fromBytes(value));
  }

  get domain(): string {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get tokenURI(): string | null {
    let value = this.get("tokenURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string | null) {
    if (!value) {
      this.unset("tokenURI");
    } else {
      this.set("tokenURI", Value.fromString(<string>value));
    }
  }

  get crawls(): CrawlEventLoader {
    return new CrawlEventLoader(
      "License",
      this.get("id")!.toBytes().toHexString(),
      "crawls",
    );
  }

  get totalEarnings(): BigInt {
    let value = this.get("totalEarnings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalEarnings(value: BigInt) {
    this.set("totalEarnings", Value.fromBigInt(value));
  }

  get totalCrawls(): BigInt {
    let value = this.get("totalCrawls");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCrawls(value: BigInt) {
    this.set("totalCrawls", Value.fromBigInt(value));
  }

  get averageEarningPerCrawl(): BigDecimal {
    let value = this.get("averageEarningPerCrawl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageEarningPerCrawl(value: BigDecimal) {
    this.set("averageEarningPerCrawl", Value.fromBigDecimal(value));
  }

  get activities(): LicenseActivityLoader {
    return new LicenseActivityLoader(
      "License",
      this.get("id")!.toBytes().toHexString(),
      "activities",
    );
  }

  get dailyStats(): LicenseDailyStatsLoader {
    return new LicenseDailyStatsLoader(
      "License",
      this.get("id")!.toBytes().toHexString(),
      "dailyStats",
    );
  }

  get mintedAt(): BigInt {
    let value = this.get("mintedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mintedAt(value: BigInt) {
    this.set("mintedAt", Value.fromBigInt(value));
  }

  get mintedAtBlock(): BigInt {
    let value = this.get("mintedAtBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mintedAtBlock(value: BigInt) {
    this.set("mintedAtBlock", Value.fromBigInt(value));
  }

  get mintedTxHash(): Bytes {
    let value = this.get("mintedTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set mintedTxHash(value: Bytes) {
    this.set("mintedTxHash", Value.fromBytes(value));
  }

  get lastCrawlAt(): BigInt | null {
    let value = this.get("lastCrawlAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastCrawlAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastCrawlAt");
    } else {
      this.set("lastCrawlAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }
}

export class CrawlEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CrawlEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CrawlEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CrawlEvent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): CrawlEvent | null {
    return changetype<CrawlEvent | null>(
      store.get_in_block("CrawlEvent", id.toHexString()),
    );
  }

  static load(id: Bytes): CrawlEvent | null {
    return changetype<CrawlEvent | null>(
      store.get("CrawlEvent", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get requester(): Bytes {
    let value = this.get("requester");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set requester(value: Bytes) {
    this.set("requester", Value.fromBytes(value));
  }

  get publisher(): Bytes {
    let value = this.get("publisher");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set publisher(value: Bytes) {
    this.set("publisher", Value.fromBytes(value));
  }

  get license(): Bytes {
    let value = this.get("license");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set license(value: Bytes) {
    this.set("license", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get protocolFee(): BigInt {
    let value = this.get("protocolFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set protocolFee(value: BigInt) {
    this.set("protocolFee", Value.fromBigInt(value));
  }

  get netAmount(): BigInt {
    let value = this.get("netAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set netAmount(value: BigInt) {
    this.set("netAmount", Value.fromBigInt(value));
  }

  get targetUrl(): string {
    let value = this.get("targetUrl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set targetUrl(value: string) {
    this.set("targetUrl", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Payment extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Payment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Payment must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Payment", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Payment | null {
    return changetype<Payment | null>(
      store.get_in_block("Payment", id.toHexString()),
    );
  }

  static load(id: Bytes): Payment | null {
    return changetype<Payment | null>(store.get("Payment", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get crawlEvent(): Bytes | null {
    let value = this.get("crawlEvent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set crawlEvent(value: Bytes | null) {
    if (!value) {
      this.unset("crawlEvent");
    } else {
      this.set("crawlEvent", Value.fromBytes(<Bytes>value));
    }
  }

  get license(): Bytes | null {
    let value = this.get("license");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set license(value: Bytes | null) {
    if (!value) {
      this.unset("license");
    } else {
      this.set("license", Value.fromBytes(<Bytes>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ProtocolStats extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProtocolStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProtocolStats must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProtocolStats", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ProtocolStats | null {
    return changetype<ProtocolStats | null>(
      store.get_in_block("ProtocolStats", id.toHexString()),
    );
  }

  static load(id: Bytes): ProtocolStats | null {
    return changetype<ProtocolStats | null>(
      store.get("ProtocolStats", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get totalCrawls(): BigInt {
    let value = this.get("totalCrawls");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCrawls(value: BigInt) {
    this.set("totalCrawls", Value.fromBigInt(value));
  }

  get totalProtocolFees(): BigInt {
    let value = this.get("totalProtocolFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalProtocolFees(value: BigInt) {
    this.set("totalProtocolFees", Value.fromBigInt(value));
  }

  get totalProtocolFeesWithdrawn(): BigInt {
    let value = this.get("totalProtocolFeesWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalProtocolFeesWithdrawn(value: BigInt) {
    this.set("totalProtocolFeesWithdrawn", Value.fromBigInt(value));
  }

  get baseCrawlFee(): BigInt {
    let value = this.get("baseCrawlFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set baseCrawlFee(value: BigInt) {
    this.set("baseCrawlFee", Value.fromBigInt(value));
  }

  get protocolFeePercent(): BigInt {
    let value = this.get("protocolFeePercent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set protocolFeePercent(value: BigInt) {
    this.set("protocolFeePercent", Value.fromBigInt(value));
  }

  get feeRecipient(): Bytes {
    let value = this.get("feeRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set feeRecipient(value: Bytes) {
    this.set("feeRecipient", Value.fromBytes(value));
  }

  get totalPublishers(): BigInt {
    let value = this.get("totalPublishers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPublishers(value: BigInt) {
    this.set("totalPublishers", Value.fromBigInt(value));
  }

  get totalLicenses(): BigInt {
    let value = this.get("totalLicenses");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLicenses(value: BigInt) {
    this.set("totalLicenses", Value.fromBigInt(value));
  }

  get totalActiveLicenses(): BigInt {
    let value = this.get("totalActiveLicenses");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalActiveLicenses(value: BigInt) {
    this.set("totalActiveLicenses", Value.fromBigInt(value));
  }

  get averageCrawlAmount(): BigDecimal {
    let value = this.get("averageCrawlAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageCrawlAmount(value: BigDecimal) {
    this.set("averageCrawlAmount", Value.fromBigDecimal(value));
  }

  get firstCrawlAt(): BigInt | null {
    let value = this.get("firstCrawlAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set firstCrawlAt(value: BigInt | null) {
    if (!value) {
      this.unset("firstCrawlAt");
    } else {
      this.set("firstCrawlAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastCrawlAt(): BigInt | null {
    let value = this.get("lastCrawlAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastCrawlAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastCrawlAt");
    } else {
      this.set("lastCrawlAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastUpdatedAt(): BigInt {
    let value = this.get("lastUpdatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdatedAt(value: BigInt) {
    this.set("lastUpdatedAt", Value.fromBigInt(value));
  }
}

export class DailyStats extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DailyStats must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DailyStats", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DailyStats | null {
    return changetype<DailyStats | null>(
      store.get_in_block("DailyStats", id.toHexString()),
    );
  }

  static load(id: Bytes): DailyStats | null {
    return changetype<DailyStats | null>(
      store.get("DailyStats", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get crawlCount(): BigInt {
    let value = this.get("crawlCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set crawlCount(value: BigInt) {
    this.set("crawlCount", Value.fromBigInt(value));
  }

  get uniquePublishers(): BigInt {
    let value = this.get("uniquePublishers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniquePublishers(value: BigInt) {
    this.set("uniquePublishers", Value.fromBigInt(value));
  }

  get uniqueCrawlers(): BigInt {
    let value = this.get("uniqueCrawlers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniqueCrawlers(value: BigInt) {
    this.set("uniqueCrawlers", Value.fromBigInt(value));
  }

  get protocolFees(): BigInt {
    let value = this.get("protocolFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set protocolFees(value: BigInt) {
    this.set("protocolFees", Value.fromBigInt(value));
  }

  get averageCrawlAmount(): BigDecimal {
    let value = this.get("averageCrawlAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageCrawlAmount(value: BigDecimal) {
    this.set("averageCrawlAmount", Value.fromBigDecimal(value));
  }

  get newLicenses(): BigInt {
    let value = this.get("newLicenses");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newLicenses(value: BigInt) {
    this.set("newLicenses", Value.fromBigInt(value));
  }

  get newPublishers(): BigInt {
    let value = this.get("newPublishers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newPublishers(value: BigInt) {
    this.set("newPublishers", Value.fromBigInt(value));
  }
}

export class PublisherDailyStats extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PublisherDailyStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PublisherDailyStats must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PublisherDailyStats", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PublisherDailyStats | null {
    return changetype<PublisherDailyStats | null>(
      store.get_in_block("PublisherDailyStats", id.toHexString()),
    );
  }

  static load(id: Bytes): PublisherDailyStats | null {
    return changetype<PublisherDailyStats | null>(
      store.get("PublisherDailyStats", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get publisher(): Bytes {
    let value = this.get("publisher");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set publisher(value: Bytes) {
    this.set("publisher", Value.fromBytes(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get earnings(): BigInt {
    let value = this.get("earnings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set earnings(value: BigInt) {
    this.set("earnings", Value.fromBigInt(value));
  }

  get crawlCount(): BigInt {
    let value = this.get("crawlCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set crawlCount(value: BigInt) {
    this.set("crawlCount", Value.fromBigInt(value));
  }

  get uniqueCrawlers(): BigInt {
    let value = this.get("uniqueCrawlers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniqueCrawlers(value: BigInt) {
    this.set("uniqueCrawlers", Value.fromBigInt(value));
  }

  get averageEarningPerCrawl(): BigDecimal {
    let value = this.get("averageEarningPerCrawl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageEarningPerCrawl(value: BigDecimal) {
    this.set("averageEarningPerCrawl", Value.fromBigDecimal(value));
  }

  get feesWithdrawn(): BigInt {
    let value = this.get("feesWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feesWithdrawn(value: BigInt) {
    this.set("feesWithdrawn", Value.fromBigInt(value));
  }
}

export class LicenseDailyStats extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LicenseDailyStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LicenseDailyStats must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LicenseDailyStats", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): LicenseDailyStats | null {
    return changetype<LicenseDailyStats | null>(
      store.get_in_block("LicenseDailyStats", id.toHexString()),
    );
  }

  static load(id: Bytes): LicenseDailyStats | null {
    return changetype<LicenseDailyStats | null>(
      store.get("LicenseDailyStats", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get license(): Bytes {
    let value = this.get("license");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set license(value: Bytes) {
    this.set("license", Value.fromBytes(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get earnings(): BigInt {
    let value = this.get("earnings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set earnings(value: BigInt) {
    this.set("earnings", Value.fromBigInt(value));
  }

  get crawlCount(): BigInt {
    let value = this.get("crawlCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set crawlCount(value: BigInt) {
    this.set("crawlCount", Value.fromBigInt(value));
  }

  get uniqueCrawlers(): BigInt {
    let value = this.get("uniqueCrawlers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniqueCrawlers(value: BigInt) {
    this.set("uniqueCrawlers", Value.fromBigInt(value));
  }

  get averageEarningPerCrawl(): BigDecimal {
    let value = this.get("averageEarningPerCrawl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageEarningPerCrawl(value: BigDecimal) {
    this.set("averageEarningPerCrawl", Value.fromBigDecimal(value));
  }
}

export class PublisherActivity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PublisherActivity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PublisherActivity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PublisherActivity", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PublisherActivity | null {
    return changetype<PublisherActivity | null>(
      store.get_in_block("PublisherActivity", id.toHexString()),
    );
  }

  static load(id: Bytes): PublisherActivity | null {
    return changetype<PublisherActivity | null>(
      store.get("PublisherActivity", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get publisher(): Bytes {
    let value = this.get("publisher");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set publisher(value: Bytes) {
    this.set("publisher", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get license(): Bytes | null {
    let value = this.get("license");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set license(value: Bytes | null) {
    if (!value) {
      this.unset("license");
    } else {
      this.set("license", Value.fromBytes(<Bytes>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class LicenseActivity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LicenseActivity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LicenseActivity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LicenseActivity", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): LicenseActivity | null {
    return changetype<LicenseActivity | null>(
      store.get_in_block("LicenseActivity", id.toHexString()),
    );
  }

  static load(id: Bytes): LicenseActivity | null {
    return changetype<LicenseActivity | null>(
      store.get("LicenseActivity", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get license(): Bytes {
    let value = this.get("license");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set license(value: Bytes) {
    this.set("license", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get requester(): Bytes | null {
    let value = this.get("requester");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set requester(value: Bytes | null) {
    if (!value) {
      this.unset("requester");
    } else {
      this.set("requester", Value.fromBytes(<Bytes>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CrawlerStats extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CrawlerStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CrawlerStats must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CrawlerStats", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): CrawlerStats | null {
    return changetype<CrawlerStats | null>(
      store.get_in_block("CrawlerStats", id.toHexString()),
    );
  }

  static load(id: Bytes): CrawlerStats | null {
    return changetype<CrawlerStats | null>(
      store.get("CrawlerStats", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get totalSpent(): BigInt {
    let value = this.get("totalSpent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSpent(value: BigInt) {
    this.set("totalSpent", Value.fromBigInt(value));
  }

  get totalCrawls(): BigInt {
    let value = this.get("totalCrawls");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCrawls(value: BigInt) {
    this.set("totalCrawls", Value.fromBigInt(value));
  }

  get uniquePublishers(): BigInt {
    let value = this.get("uniquePublishers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniquePublishers(value: BigInt) {
    this.set("uniquePublishers", Value.fromBigInt(value));
  }

  get uniqueLicenses(): BigInt {
    let value = this.get("uniqueLicenses");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniqueLicenses(value: BigInt) {
    this.set("uniqueLicenses", Value.fromBigInt(value));
  }

  get averageAmountPerCrawl(): BigDecimal {
    let value = this.get("averageAmountPerCrawl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageAmountPerCrawl(value: BigDecimal) {
    this.set("averageAmountPerCrawl", Value.fromBigDecimal(value));
  }

  get firstCrawlAt(): BigInt | null {
    let value = this.get("firstCrawlAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set firstCrawlAt(value: BigInt | null) {
    if (!value) {
      this.unset("firstCrawlAt");
    } else {
      this.set("firstCrawlAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastCrawlAt(): BigInt | null {
    let value = this.get("lastCrawlAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastCrawlAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastCrawlAt");
    } else {
      this.set("lastCrawlAt", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class HourlyStats extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HourlyStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type HourlyStats must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("HourlyStats", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): HourlyStats | null {
    return changetype<HourlyStats | null>(
      store.get_in_block("HourlyStats", id.toHexString()),
    );
  }

  static load(id: Bytes): HourlyStats | null {
    return changetype<HourlyStats | null>(
      store.get("HourlyStats", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hour(): BigInt {
    let value = this.get("hour");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set hour(value: BigInt) {
    this.set("hour", Value.fromBigInt(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get crawlCount(): BigInt {
    let value = this.get("crawlCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set crawlCount(value: BigInt) {
    this.set("crawlCount", Value.fromBigInt(value));
  }

  get uniquePublishers(): BigInt {
    let value = this.get("uniquePublishers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniquePublishers(value: BigInt) {
    this.set("uniquePublishers", Value.fromBigInt(value));
  }

  get uniqueCrawlers(): BigInt {
    let value = this.get("uniqueCrawlers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniqueCrawlers(value: BigInt) {
    this.set("uniqueCrawlers", Value.fromBigInt(value));
  }

  get averageCrawlAmount(): BigDecimal {
    let value = this.get("averageCrawlAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set averageCrawlAmount(value: BigDecimal) {
    this.set("averageCrawlAmount", Value.fromBigDecimal(value));
  }
}

export class TopPublisher extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TopPublisher entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TopPublisher must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TopPublisher", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TopPublisher | null {
    return changetype<TopPublisher | null>(
      store.get_in_block("TopPublisher", id.toHexString()),
    );
  }

  static load(id: Bytes): TopPublisher | null {
    return changetype<TopPublisher | null>(
      store.get("TopPublisher", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get publisher(): Bytes {
    let value = this.get("publisher");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set publisher(value: Bytes) {
    this.set("publisher", Value.fromBytes(value));
  }

  get totalEarnings(): BigInt {
    let value = this.get("totalEarnings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalEarnings(value: BigInt) {
    this.set("totalEarnings", Value.fromBigInt(value));
  }

  get totalCrawls(): BigInt {
    let value = this.get("totalCrawls");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCrawls(value: BigInt) {
    this.set("totalCrawls", Value.fromBigInt(value));
  }

  get earningsRank(): BigInt {
    let value = this.get("earningsRank");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set earningsRank(value: BigInt) {
    this.set("earningsRank", Value.fromBigInt(value));
  }

  get crawlVolumeRank(): BigInt {
    let value = this.get("crawlVolumeRank");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set crawlVolumeRank(value: BigInt) {
    this.set("crawlVolumeRank", Value.fromBigInt(value));
  }
}

export class TopLicense extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TopLicense entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TopLicense must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TopLicense", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TopLicense | null {
    return changetype<TopLicense | null>(
      store.get_in_block("TopLicense", id.toHexString()),
    );
  }

  static load(id: Bytes): TopLicense | null {
    return changetype<TopLicense | null>(
      store.get("TopLicense", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get license(): Bytes {
    let value = this.get("license");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set license(value: Bytes) {
    this.set("license", Value.fromBytes(value));
  }

  get totalEarnings(): BigInt {
    let value = this.get("totalEarnings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalEarnings(value: BigInt) {
    this.set("totalEarnings", Value.fromBigInt(value));
  }

  get totalCrawls(): BigInt {
    let value = this.get("totalCrawls");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCrawls(value: BigInt) {
    this.set("totalCrawls", Value.fromBigInt(value));
  }

  get earningsRank(): BigInt {
    let value = this.get("earningsRank");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set earningsRank(value: BigInt) {
    this.set("earningsRank", Value.fromBigInt(value));
  }

  get crawlVolumeRank(): BigInt {
    let value = this.get("crawlVolumeRank");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set crawlVolumeRank(value: BigInt) {
    this.set("crawlVolumeRank", Value.fromBigInt(value));
  }
}

export class LicenseLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): License[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<License[]>(value);
  }
}

export class PublisherActivityLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PublisherActivity[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PublisherActivity[]>(value);
  }
}

export class PublisherDailyStatsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PublisherDailyStats[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PublisherDailyStats[]>(value);
  }
}

export class CrawlEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CrawlEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CrawlEvent[]>(value);
  }
}

export class LicenseActivityLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): LicenseActivity[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<LicenseActivity[]>(value);
  }
}

export class LicenseDailyStatsLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): LicenseDailyStats[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<LicenseDailyStats[]>(value);
  }
}
