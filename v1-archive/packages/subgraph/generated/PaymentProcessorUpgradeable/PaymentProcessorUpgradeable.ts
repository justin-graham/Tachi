// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CrawlRequested extends ethereum.Event {
  get params(): CrawlRequested__Params {
    return new CrawlRequested__Params(this);
  }
}

export class CrawlRequested__Params {
  _event: CrawlRequested;

  constructor(event: CrawlRequested) {
    this._event = event;
  }

  get requester(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get publisher(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get protocolFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get targetUrl(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class FeesWithdrawn extends ethereum.Event {
  get params(): FeesWithdrawn__Params {
    return new FeesWithdrawn__Params(this);
  }
}

export class FeesWithdrawn__Params {
  _event: FeesWithdrawn;

  constructor(event: FeesWithdrawn) {
    this._event = event;
  }

  get publisher(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProtocolFeesWithdrawn extends ethereum.Event {
  get params(): ProtocolFeesWithdrawn__Params {
    return new ProtocolFeesWithdrawn__Params(this);
  }
}

export class ProtocolFeesWithdrawn__Params {
  _event: ProtocolFeesWithdrawn;

  constructor(event: ProtocolFeesWithdrawn) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BaseCrawlFeeUpdated extends ethereum.Event {
  get params(): BaseCrawlFeeUpdated__Params {
    return new BaseCrawlFeeUpdated__Params(this);
  }
}

export class BaseCrawlFeeUpdated__Params {
  _event: BaseCrawlFeeUpdated;

  constructor(event: BaseCrawlFeeUpdated) {
    this._event = event;
  }

  get newFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProtocolFeePercentUpdated extends ethereum.Event {
  get params(): ProtocolFeePercentUpdated__Params {
    return new ProtocolFeePercentUpdated__Params(this);
  }
}

export class ProtocolFeePercentUpdated__Params {
  _event: ProtocolFeePercentUpdated;

  constructor(event: ProtocolFeePercentUpdated) {
    this._event = event;
  }

  get newPercent(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FeeRecipientUpdated extends ethereum.Event {
  get params(): FeeRecipientUpdated__Params {
    return new FeeRecipientUpdated__Params(this);
  }
}

export class FeeRecipientUpdated__Params {
  _event: FeeRecipientUpdated;

  constructor(event: FeeRecipientUpdated) {
    this._event = event;
  }

  get newRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PaymentProcessorUpgradeable extends ethereum.SmartContract {
  static bind(address: Address): PaymentProcessorUpgradeable {
    return new PaymentProcessorUpgradeable(
      "PaymentProcessorUpgradeable",
      address,
    );
  }

  baseCrawlFee(): BigInt {
    let result = super.call("baseCrawlFee", "baseCrawlFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_baseCrawlFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("baseCrawlFee", "baseCrawlFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolFeePercent(): BigInt {
    let result = super.call(
      "protocolFeePercent",
      "protocolFeePercent():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_protocolFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolFeePercent",
      "protocolFeePercent():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usdcToken(): Address {
    let result = super.call("usdcToken", "usdcToken():(address)", []);

    return result[0].toAddress();
  }

  try_usdcToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdcToken", "usdcToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  crawlNFTContract(): Address {
    let result = super.call(
      "crawlNFTContract",
      "crawlNFTContract():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_crawlNFTContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "crawlNFTContract",
      "crawlNFTContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}
