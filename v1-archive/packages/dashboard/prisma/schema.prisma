// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  walletAddress String? @unique
  
  // Authentication
  emailVerified DateTime?
  image         String?
  
  // Profile information
  company       String?
  website       String?
  description   String?
  
  // API usage tracking
  totalRequests Int @default(0)
  monthlyRequests Int @default(0)
  lastRequestAt DateTime?
  
  // Account status
  isActive      Boolean @default(true)
  isPremium     Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  apiKeys   ApiKey[]
  sessions  Session[]
  accounts  Account[]
  
  @@map("users")
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String   // User-friendly name for the key
  keyHash   String   @unique // Hashed version of the API key
  keyPrefix String   // First 8 characters for display (e.g., "sk_live_12345678...")
  
  // Usage tracking
  totalRequests    Int @default(0)
  monthlyRequests  Int @default(0)
  lastUsedAt       DateTime?
  
  // Key management
  isActive    Boolean @default(true)
  expiresAt   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
